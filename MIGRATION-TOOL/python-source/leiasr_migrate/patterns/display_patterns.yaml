# LeiaSR Display API Migration Patterns
# Defines what to detect in legacy code

detection_patterns:
  # Include statements
  display_include:
    pattern: '#include\s+"sr/world/display/display\.h"'
    type: regex
    description: "Display header included without lazy binding"

  # Note: lazy_binding_missing pattern removed - complex lookbehind not supported
  # The add_lazy_binding transformation checks for this instead

  # Display creation patterns
  display_create_pointer:
    pattern: 'SR::Display\s*\*\s+(\w+)\s*=\s*SR::Display::create\s*\(\s*([^)]+)\s*\)'
    type: regex
    capture_groups: [variable_name, context_arg]
    description: "Display created with pointer syntax"

  display_create_inline:
    pattern: 'SR::Display::create\s*\(\s*([^)]+)\s*\)'
    type: regex
    capture_groups: [context_arg]
    description: "Display::create called inline"

  # Display method calls
  display_method_call:
    patterns:
      - 'getResolutionHeight\s*\(\s*\)'
      - 'getResolutionWidth\s*\(\s*\)'
      - 'getPhysicalResolutionHeight\s*\(\s*\)'
      - 'getPhysicalResolutionWidth\s*\(\s*\)'
      - 'getPhysicalSizeHeight\s*\(\s*\)'
      - 'getPhysicalSizeWidth\s*\(\s*\)'
      - 'getDotPitch\s*\(\s*\)'
      - 'getLocation\s*\(\s*\)'
      - 'getRecommendedViewsTextureWidth\s*\(\s*\)'
      - 'getRecommendedViewsTextureHeight\s*\(\s*\)'
    type: regex_list
    description: "Display method calls that need validity checks"

  # Manual wait loop patterns
  manual_wait_loop:
    pattern: 'while\s*\([^)]*\)\s*\{[^}]*Display::create[^}]*Sleep\s*\([^}]*\}'
    type: regex
    multiline: true
    description: "Manual display polling loop"

  manual_validity_check:
    pattern: 'if\s*\(\s*display\s*!=\s*nullptr\s*\)'
    type: regex
    description: "Manual nullptr check that should use isValid()"

risk_levels:
  # How confident are we in automatic migration
  high_confidence:
    - display_include
    - display_create_pointer

  medium_confidence:
    - display_create_inline
    - display_method_call
    - manual_validity_check

  needs_review:
    - manual_wait_loop  # Complex control flow

transformations:
  # These are referenced by the transformer module
  add_lazy_binding:
    before: '#include "sr/world/display/display.h"'
    after: |
      #define SRDISPLAY_LAZYBINDING  // Enable modern DisplayManager with fallback
      #include "sr/world/display/display.h"
    priority: 1

  add_helper_include:
    after_pattern: '#include "sr/world/display/display.h"'
    insert: '#include "{helper_path}/display_helper.h"'
    priority: 2

  replace_display_create:
    pattern: 'SR::Display\s*\*\s+(\w+)\s*=\s*SR::Display::create\s*\(\s*([^)]+)\s*\);?'
    replacement: 'SR::Helper::DisplayAccess \1(\2);'
    description: "Convert Display* to DisplayAccess"
    priority: 3

  replace_pointer_arrow:
    # After creating DisplayAccess, change -> to .
    pattern: '(\w+)->([a-zA-Z_]\w*\s*\()'
    replacement: '\1.\2'
    description: "Change pointer dereference to direct access"
    condition: "variable is DisplayAccess"
    priority: 4

  wrap_with_validity_check:
    pattern: '(\w+)\.(get[A-Z]\w+\s*\([^)]*\))'
    template: |
      if (\1.isDisplayValid()) {
          \1.\2
      } else {
          // TODO: Add fallback behavior
      }
    description: "Add isValid() check around Display methods"
    optional: true  # User can choose to apply or not
    priority: 5
